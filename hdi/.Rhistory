opts <- opts[-1] ## want to keep Sepal.Length as the x values
shinyUI(pageWithSidebar(
headerPanel('test with iris database'),
sidebarPanel(
selectInput(inputId = "select1", label = "select1",
choices = opts),
selectInput(inputId = "select2", label = "select2",
choices = opts)
),
mainPanel(
p('Output text1'),
textOutput('text1'),
textOutput('text2'),
plotlyOutput('plot1')
)
))
)
output$text1 <- renderText({input$id1})
output$text2 <- renderText({input$select1})
output$text3 <- renderText({input$select2})
output$plot1 <- renderPlotly({
plot_ly(x = input$select1,
y = all$Human_Development_Index_female,
alpha= 0.70,
mode = "markers",
type = "scatter",
showlegend = F,
color = all$Country,
size = I(sqrt(all$Population_in_MDP_k)*2),
hoverinfo = "text",
text = paste(toupper(all$Country),
"</br>Human Development Index: ",
all$Human_Development_Index,
"</br>Multi-dimensional Poverty Index: ",
all$MPI_index,
"</br>Life expectency at birth: ",
all$Life_expectancy_at_birth,
"</br>Population in Multidimensional Poverty (thousands): ",
all$Population_in_MDP_k,
"</br>MPI Year of survey: ",
all$Year_of_survey)) %>%
layout(title ="HDI vs MPI",
annotations = list(text = paste("Point size proportional to </br> Population in Multi-dimensional Poverty </br> (thousands)"),
x = 0.7,
y = 0.5,
showarrow = F,
font = list(size = 12,
color = 'white')),
titlefont = t,
plot_bgcolor='black',
xaxis = list(title = "Human Development Index",
titlefont = t),
yaxis = list(title = "Multi-dimensional Poverty Index",
titlefont = t))
})
output$hover <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover events appear here (unhover to clear)" else d
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d)) "Click events appear here (double-click to clear)" else d
})
output$brush <- renderPrint({
d <- event_data("plotly_selected")
if (is.null(d)) "Click and drag events (i.e., select/lasso) appear here (double-click to clear)" else d
})
output$zoom <- renderPrint({
d <- event_data("plotly_relayout")
if (is.null(d)) "Relayout (i.e., zoom) events appear here" else d
})
}
shinyApp(ui, server)
runApp()
runApp()
GDI = read.csv('GDI_tidied.csv', stringsAsFactors = T, header = T)
HDI = read.csv('HDI_tidied.csv', stringsAsFactors = T, header = T)
MPI = read.csv('MPI_tidied.csv', stringsAsFactors = T, header = T)
MPI$Population_in_MDP_k = gsub(",", ".",  MPI$Population_in_MDP_k)
MPI$Population_in_MDP_k = as.numeric(MPI$Population_in_MDP_k)
all = merge(GDI, HDI, by.x = 'Country', by.y = 'Country')
all = merge(all, MPI, by.x = 'Country', by.y = 'Country', all.x = T)
all$Year_of_survey = gsub("/$|M|D|N|P", "", as.character(all$MPI_year_and_survey))
all$Year_of_survey = as.factor(all$Year_of_survey)
opts <- colnames(all)
opts <- opts[-1] ## want to keep Sepal.Length as the x values
runApp()
runApp()
runApp()
GDI = read.csv('GDI_tidied.csv', stringsAsFactors = T, header = T)
runApp()
GDI = read.csv('GDI_tidied.csv', stringsAsFactors = T, header = T)
HDI = read.csv('HDI_tidied.csv', stringsAsFactors = T, header = T)
MPI = read.csv('MPI_tidied.csv', stringsAsFactors = T, header = T)
MPI$Population_in_MDP_k = gsub(",", ".",  MPI$Population_in_MDP_k)
MPI$Population_in_MDP_k = as.numeric(MPI$Population_in_MDP_k)
all = merge(GDI, HDI, by.x = 'Country', by.y = 'Country')
all = merge(all, MPI, by.x = 'Country', by.y = 'Country', all.x = T)
all$Year_of_survey = gsub("/$|M|D|N|P", "", as.character(all$MPI_year_and_survey))
all$Year_of_survey = as.factor(all$Year_of_survey)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot() +
geom_line(aes(x = all$Gender_Development_Index, y = all$Life_expectancy_at_birth_male))
runApp()
runApp()
runApp()
runApp()
x_dt = all[colnames(all) == 'Gender_Development_Index']
View(x_dt)
GDI = read.csv('GDI_tidied.csv', stringsAsFactors = T, header = T)
HDI = read.csv('HDI_tidied.csv', stringsAsFactors = T, header = T)
MPI = read.csv('MPI_tidied.csv', stringsAsFactors = T, header = T)
MPI$Population_in_MDP_k = gsub(",", ".",  MPI$Population_in_MDP_k)
MPI$Population_in_MDP_k = as.numeric(MPI$Population_in_MDP_k)
all = merge(GDI, HDI, by.x = 'Country', by.y = 'Country')
all = merge(all, MPI, by.x = 'Country', by.y = 'Country', all.x = T)
all$Year_of_survey = gsub("/$|M|D|N|P", "", as.character(all$MPI_year_and_survey))
all$Year_of_survey = as.factor(all$Year_of_survey)
opts <- colnames(all)
opts <- opts[-1] ## want to keep Sepal.Length as the x values
runApp()
x_dt = all[colnames(all) == 'Gender_Development_Index']
y_dt = all[colnames(all) == 'Life_expectancy_at_birth_female']
plot_ly(x = x_dt,
y = y_dt,
alpha= 0.70,
mode = "markers",
type = "scatter",
showlegend = F,
color = all$Country,
size = I(sqrt(all$Population_in_MDP_k)*2),
hoverinfo = "text",
text = paste(toupper(all$Country),
"</br>Human Development Index: ",
all$Human_Development_Index,
"</br>Multi-dimensional Poverty Index: ",
all$MPI_index,
"</br>Life expectency at birth: ",
all$Life_expectancy_at_birth,
"</br>Population in Multidimensional Poverty (thousands): ",
all$Population_in_MDP_k,
"</br>MPI Year of survey: ",
all$Year_of_survey)) %>%
layout(title ="HDI vs MPI",
annotations = list(text = paste("Point size proportional to </br> Population in Multi-dimensional Poverty </br> (thousands)"),
x = 0.7,
y = 0.5,
showarrow = F,
font = list(size = 12,
color = 'white')),
titlefont = t,
plot_bgcolor='black',
xaxis = list(title = "Human Development Index",
titlefont = t),
yaxis = list(title = "Multi-dimensional Poverty Index",
titlefont = t))
runApp()
plot_ly(x = all[colnames(all) == 'Gender_Development_Index'],
y = all[colnames(all) == 'Life_expectancy_at_birth_female'],
alpha= 0.70,
mode = "markers",
type = "scatter",
showlegend = F,
color = all$Country,
size = I(sqrt(all$Population_in_MDP_k)*2),
hoverinfo = "text",
text = paste(toupper(all$Country),
"</br>Human Development Index: ",
all$Human_Development_Index,
"</br>Multi-dimensional Poverty Index: ",
all$MPI_index,
"</br>Life expectency at birth: ",
all$Life_expectancy_at_birth,
"</br>Population in Multidimensional Poverty (thousands): ",
all$Population_in_MDP_k,
"</br>MPI Year of survey: ",
all$Year_of_survey)) %>%
layout(title ="HDI vs MPI",
annotations = list(text = paste("Point size proportional to </br> Population in Multi-dimensional Poverty </br> (thousands)"),
x = 0.7,
y = 0.5,
showarrow = F,
font = list(size = 12,
color = 'white')),
titlefont = t,
plot_bgcolor='black',
xaxis = list(title = "Human Development Index",
titlefont = t),
yaxis = list(title = "Multi-dimensional Poverty Index",
titlefont = t))
all$Population_in_MDP_k
plot_ly(x = all[colnames(all) == 'Gender_Development_Index'],
y = all[colnames(all) == 'Life_expectancy_at_birth_female'],
alpha= 0.70,
mode = "markers",
type = "scatter",
showlegend = F#,
#color = all$Country,
#size = I(sqrt(all$Population_in_MDP_k)*2),
#hoverinfo = "text",
# text = paste(toupper(all$Country),
#              "</br>Human Development Index: ",
#              all$Human_Development_Index,
#              "</br>Multi-dimensional Poverty Index: ",
#              all$MPI_index,
#              "</br>Life expectency at birth: ",
#              all$Life_expectancy_at_birth,
#              "</br>Population in Multidimensional Poverty (thousands): ",
#              all$Population_in_MDP_k,
#              "</br>MPI Year of survey: ",
#              all$Year_of_survey)) %>%
)%>%
layout(title ="HDI vs MPI",
annotations = list(text = paste("Point size proportional to </br> Population in Multi-dimensional Poverty </br> (thousands)"),
x = 0.7,
y = 0.5,
showarrow = F,
font = list(size = 12,
color = 'white')),
titlefont = t,
plot_bgcolor='black',
xaxis = list(title = "Human Development Index",
titlefont = t),
yaxis = list(title = "Multi-dimensional Poverty Index",
titlefont = t))
plot(x_dt, y_dt)
plot(x_dt[,1], y_dt[,1])
runApp()
EF = read.csv('EF_GDP.csv', stringsAsFactors = T, header = T)
View(EF)
GDI = read.csv('GDI_tidied.csv', stringsAsFactors = T, header = T)
HDI = read.csv('HDI_tidied.csv', stringsAsFactors = T, header = T)
MPI = read.csv('MPI_tidied.csv', stringsAsFactors = T, header = T)
EF = read.csv('EF_GDP.csv', stringsAsFactors = T, header = T)
MPI$Population_in_MDP_k = gsub(",", ".",  MPI$Population_in_MDP_k)
MPI$Population_in_MDP_k = as.numeric(MPI$Population_in_MDP_k)
all = merge(GDI, HDI, by.x = 'Country', by.y = 'Country')
all = merge(all, MPI, by.x = 'Country', by.y = 'Country', all.x = T)
all = merge(all, EF, by.x = 'Country', by.y = 'Country', all.x = T)
View(all)
View(EF)
EF$Country
GDI$Country
View(HDI)
GDI = read.csv('GDI_tidied.csv', stringsAsFactors = T, header = T)
HDI = read.csv('HDI_tidied.csv', stringsAsFactors = T, header = T)
MPI = read.csv('MPI_tidied.csv', stringsAsFactors = T, header = T)
EF = read.csv('EF_GDP.csv', stringsAsFactors = T, header = T)
MPI$Population_in_MDP_k = gsub(",", ".",  MPI$Population_in_MDP_k)
MPI$Population_in_MDP_k = as.numeric(MPI$Population_in_MDP_k)
all = merge(GDI, HDI, by.x = 'Country', by.y = 'Country')
all = merge(all, MPI, by.x = 'Country', by.y = 'Country', all.x = T)
all = merge(all, EF, by.x = 'Country', by.y = 'Country', all.x = T)
View(all)
all$Year_of_survey = gsub("/$|M|D|N|P", "", as.character(all$MPI_year_and_survey))
all$Year_of_survey = as.factor(all$Year_of_survey)
runApp()
runApp()
GDI = read.csv('GDI_tidied.csv', stringsAsFactors = T, header = T)
HDI = read.csv('HDI_tidied.csv', stringsAsFactors = T, header = T)
MPI = read.csv('MPI_tidied.csv', stringsAsFactors = T, header = T)
EF = read.csv('EF_GDP.csv', stringsAsFactors = T, header = T)
MPI$Population_in_MDP_k = gsub(",", ".",  MPI$Population_in_MDP_k)
MPI$Population_in_MDP_k = as.numeric(MPI$Population_in_MDP_k)
all = merge(GDI, HDI, by.x = 'Country', by.y = 'Country')
all = merge(all, MPI, by.x = 'Country', by.y = 'Country', all.x = T)
all = merge(all, EF, by.x = 'Country', by.y = 'Country', all.x = T)
all$Year_of_survey = gsub("/$|M|D|N|P", "", as.character(all$MPI_year_and_survey))
all$Year_of_survey = as.factor(all$Year_of_survey)
opts <- colnames(all)
opts <- opts[-1] ## want to keep Sepal.Length as the x values
write.csv(all, 'all_data.csv')
write.csv(opts, 'opts.csv')
all = read.csv('all_data.csv')
opts = read.csv('opts.csv')
View(opts)
runApp()
all = read.csv('all_data.csv')
sqrt(all$Population_in_MDP_k)*2
scale_factor =
max(sqrt(all$Population_in_MDP_k)*2))
scale_factor =
max(sqrt(all$Population_in_MDP_k)*2)
max(sqrt(all$Population_in_MDP_k)*2)
scale_factor =
max(sqrt(all$Population_in_MDP_k)*2, na.rm = T)
max(sqrt(all$Population_in_MDP_k)*2, na.rm = T)
runApp()
runApp()
all = read.csv('all_data.csv')
z_dt = all[colnames(all) == as.character(all$Life_expectancy_at_birth)]
all$Life_expectancy_at_birth
z_dt = all[colnames(all) == as.character(all$Life_expectancy_at_birth)]
as.character(all$Life_expectancy_at_birth)
z_dt = all[colnames(all) == 'Life_expectancy_at_birth']
View(z_dt)
sqrt(z_dt)
runApp()
max_z = max(z_dt[,1])
scale_factor = max_z/60
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?gsub
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shiny")
install.packages("dplyr")
install.packages("devtools")
install.packages("shiny")
install.packages("dplyr")
install.packages("devtools")
library("devtools")
install_github("ropensci/plotly")
shiny::runApp()
runGist("3239667")
runGist("289a52a4f1e27d253061094e8e456cd2")
shiny::runApp()
runApp('non-plotly')
runApp('non-plotly')
getwd
getwd()
setwd('c:\\R')
tweets = read.csv('vet_tweets_unique.csv')
View(tweets)
plot(tweets.unique$place_lat, tweets.unique$place_lon)
tweets.unique = read.csv('vet_tweets_unique.csv')
plot(tweets.unique$place_lat, tweets.unique$place_lon)
#Load libraries,
require(maptools)
#Get a world map,
data(wrld_simpl)
par(mar = c(0,0,1,0),
pin = c(4,2),
pty = "m",
xaxs = "i",
xaxt = 'n',
xpd = FALSE,
yaxs = "i",
yaxt = 'n')
# plot(wrld_simpl,
#      col='dark green',
#      bg='white',
#      border='black',
#      ann=FALSE,
#      axes = FALSE,
#      main = "Walk my dog",
#      xlim = c(-120,10),
#      ylim = c(25,53))
plot(wrld_simpl,
col='dark green',
bg='white',
border='black',
ann=FALSE,
axes = FALSE,
main = "Vets!")
points(tweets.unique$place_lon,
tweets.unique$place_lat,
pch = 16,
cex = 0.5,
col = 'red')
View(tweets.unique)
text(x=tweets.unique$place_lon[1]-5,
y=tweets.unique$place_lat[1]-6,
labels=tweets.unique$text[1],
col = 'red',
cex = 0.5)
arrows(x0=tweets.unique$place_lon[1]-5,
y0=tweets.unique$place_lat[1]-5,
x1=tweets.unique$place_lon[1],
y1=tweets.unique$place_lat[1],
col='blue',
length=0.1,
lwd=3)
library(lubridate)
library(ggplot2)
library(dplyr)
tweets.unique$Date = sapply(strsplit(tweets.unique$created_at, " "), "[[", 3)
tweets.unique$Date = paste(tweets.unique$Date,"-12-16", sep = "")
tweets.unique$Time = sapply(strsplit(tweets.unique$created_at, " "), "[[", 4)
tweets.unique$DateTime = paste(tweets.unique$Date, tweets.unique$Time)
tweets.unique$DateTime = as.POSIXct(tweets.unique$DateTime, format = "%d-%m-%y %H:%M:%S")
tweets.unique$Time = as.POSIXct(tweets.unique$Time, format = "%H:%M:%S")
tweets.unique.arranged = arrange(tweets.unique, DateTime)
plot(tweets.unique.arranged$DateTime)
tweets.unique = read.csv('vet_tweets_unique.csv')
plot(tweets.unique$place_lat, tweets.unique$place_lon)
orld map,
data(wrld_simpl)
par(mar = c(0,0,1,0),
pin = c(4,2),
pty = "m",
xaxs = "i",
xaxt = 'n',
xpd = FALSE,
yaxs = "i",
yaxt = 'n')
# plot(wrld_simpl,
#      col='dark green',
#      bg='white',
#      border='black',
#      ann=FALSE,
#      axes = FALSE,
#      main = "Walk my dog",
#      xlim = c(-120,10),
#      ylim = c(25,53))
plot(wrld_simpl,
col='dark green',
bg='white',
border='black',
ann=FALSE,
axes = FALSE,
main = "Vets!")
points(tweets.unique$place_lon,
tweets.unique$place_lat,
pch = 16,
cex = 0.5,
col = 'red')
tweets.unique$Date = sapply(strsplit(tweets.unique$created_at, " "), "[[", 3)
tweets.unique$created_at
View(tweets.unique)
tweets.unique$Date = sapply(strsplit(tweets.unique$created_at, " "), "[[", 3)
tweets.unique$Date = paste(tweets.unique$Date,"-12-16", sep = "")
tweets.unique$Date
tweets.unique$Time = sapply(strsplit(tweets.unique$created_at, " "), "[[", 4)
tweets.unique$DateTime = paste(tweets.unique$Date, tweets.unique$Time)
tweets.unique$DateTime = as.POSIXct(tweets.unique$DateTime, format = "%d-%m-%y %H:%M:%S")
tweets.unique$Time = as.POSIXct(tweets.unique$Time, format = "%H:%M:%S")
tweets.unique.arranged = arrange(tweets.unique, DateTime)
plot(tweets.unique.arranged$DateTime)
tweets.unique.arranged
tweets.all = read.csv('vet_tweets_raw.csv')
tweets.all$Date = sapply(strsplit(tweets.all$created_at, " "), "[[", 3)
load(file = 'tweets.RData') #LOAD THIS AS IT'S THE TWEET TEMPLATE
View(tweets.all)
View(tweets.unique.arranged)
tweets.unique = read.csv('vet_tweets_unique.csv', stringsAsFactors = F)
plot(tweets.unique$place_lat, tweets.unique$place_lon)
tweets.unique$Date = sapply(strsplit(tweets.unique$created_at, " "), "[[", 3)
tweets.unique$Date = paste(tweets.unique$Date,"-12-16", sep = "")
tweets.unique$Time = sapply(strsplit(tweets.unique$created_at, " "), "[[", 4)
tweets.unique$DateTime = paste(tweets.unique$Date, tweets.unique$Time)
tweets.unique$DateTime = as.POSIXct(tweets.unique$DateTime, format = "%d-%m-%y %H:%M:%S")
tweets.unique$Time = as.POSIXct(tweets.unique$Time, format = "%H:%M:%S")
tweets.unique.arranged = arrange(tweets.unique, DateTime)
plot(tweets.unique.arranged$DateTime)
tweets.unique.arranged$Hour = hour(tweets.unique.arranged$Time)
tweets.unique.arranged$Minute = minute(tweets.unique.arranged$Time)
l = length(tweets.unique.arranged$text)
n = floor(l / 100)
tweets.unique.arranged$Time_bin = 100
k = seq(0,l,n)
i=1
while (i<length(k)) {
tweets.unique.arranged$Time_bin[(k[i]:k[i+1])] = i
i=i+1
}
plot(tweets.unique.arranged$Time_bin)
View(tweets.unique.arranged)
plot(tweets.unique$place_lat, tweets.unique$place_lon)
tweets.unique = read.csv('vet_tweets_unique.csv', stringsAsFactors = F)
tweets.unique$Date = sapply(strsplit(tweets.unique$created_at, " "), "[[", 3)
tweets.unique$Date = paste(tweets.unique$Date,"-12-16", sep = "")
tweets.unique$Time = sapply(strsplit(tweets.unique$created_at, " "), "[[", 4)
tweets.unique$DateTime = paste(tweets.unique$Date, tweets.unique$Time)
tweets.unique$DateTime = as.POSIXct(tweets.unique$DateTime, format = "%d-%m-%y %H:%M:%S")
tweets.unique$Time = as.POSIXct(tweets.unique$Time, format = "%H:%M:%S")
tweets.unique.arranged = arrange(tweets.unique, DateTime)
plot(tweets.unique.arranged$DateTime)
View(tweets.unique.arranged)
hist(tweets.unique.arranged$DateTime)
hist(tweets.unique.arranged$DateTime, breaks = 10)
hist(tweets.unique.arranged$DateTime, breaks = 100)
dev.off()
plot(tweets.unique.arranged$DateTime)
hist(tweets.unique.arranged$DateTime, breaks = 100)
hist(tweets.unique.arranged$DateTime, breaks = 50)
plot(tweets.unique.arranged$DateTime)
hist(tweets.unique.arranged$DateTime, breaks = 500)
hist(tweets.unique.arranged$DateTime, breaks = 100)
hist(tweets.unique.arranged$DateTime, breaks = 20)
